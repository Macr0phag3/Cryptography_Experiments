
# This file was *autogenerated* from the file Coppersmith.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_11 = Integer(11); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_50 = Integer(50)
import re

def CopperSimth(message, e, c, n):
    ZmodN = Zmod(n)
    c = ZmodN(c)
    message = ZmodN(message)
    P = PolynomialRing(ZmodN, names=('x',)); (x,) = P._first_ngens(1)
    pol = ((message + x) ** e) - c
    pol = pol.monic()
    xval = pol.small_roots(epsilon=_sage_const_1 /_sage_const_11 )
    if len(xval): return '%x' %(message + xval[_sage_const_0 ])
    return _sage_const_0 

Data = []
N = []
C = []
E = []
for i in [_sage_const_7 , _sage_const_11 , _sage_const_15 ]:
    with open('Frame'+str(i)) as fp:
        data = re.findall('(.{256})(.{256})(.{256})',fp.read().replace('\n',''))
        Data += data

N = [int(n,_sage_const_16 ) for n,e,c in Data]
C = [int(c,_sage_const_16 ) for n,e,c in Data]
E = [int(e,_sage_const_16 ) for n,e,c in Data]

for id in range(len(N)):
	n = N[id]
	e = E[id]
	c = C[id]
	print '[+]n:', n
	print '[+]e:', e
	for i in xrange(_sage_const_17 ):
	    rmessage = '9876543210abcdef0000000%s00000000000000000000000000000000000000000000000000000000000000000000000000000000000000005858585858585858' %i
	    message = int(rmessage,_sage_const_16 )

	    recover = CopperSimth(message, e, c, n)
	    if recover:
	    	print '  [-]m:', recover
	print '-' * _sage_const_50 
print '[!]All Done!'

